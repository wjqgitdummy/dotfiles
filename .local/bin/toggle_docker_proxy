#!/bin/bash

# grab params from command line
COMMAND=$1
https_proxy=$2
no_proxy=$3

# configs
CONFIG_FILE=~/.docker/config.json
PROXY_START_LINE="        ,\"proxy_start\": \"DOCKER PROXY START, DO NOT MODIFY MANUALLY\""
PROXY_END_LINE="        ,\"proxy_end\": \"DOCKER PROXY END, DO NOT MODIFY MANUALLY\""

# check if command is valid (enable,disable)
if [ "$COMMAND" != "enable" ] && [ "$COMMAND" != "disable" ]; then
    print_error "Invalid command $COMMAND"
    exit 1
fi

# check if num of args are correct
if [ "$COMMAND" = "enable" ] && [ "$#" -ne 3 ]; then
    echo "Illegal number of parameters"
    echo "Usage: toggle_docker_proxy.sh enable <https_proxy> <no_proxy>"
    exit
fi

if [ "$COMMAND" = "disable" ] && [ "$#" -ne 1 ]; then
    echo "Illegal number of parameters"
    echo "Usage: toggle_docker_proxy.sh disable"
    exit
fi

# utils
function print_error() {
    printf "\e[1;31;47m\tERROR\t %s \e[0m\n" "$1"
}

function print_notice() {
    printf "\e[1;34;47m %s \e[0m\n" "$1"
}

# func
function backup_config() {
    print_notice "Backing up config file"
    cp $CONFIG_FILE $CONFIG_FILE.bak
}

function enable_proxy() {
    # backup config 
    backup_config

    # check if start line exists
    grep -q "$PROXY_START_LINE" $CONFIG_FILE
    if [ $? -ne 0 ]; then
        # add start line
        sed -i "\$i\\${PROXY_START_LINE//\//\\/}" $CONFIG_FILE
        # add proxy lines to config file
        sed -i "\$i\        ,\"proxies\": {" $CONFIG_FILE
        sed -i "\$i\                \"default\": {" $CONFIG_FILE
        sed -i "\$i\                        \"httpProxy\": \"${https_proxy//\//\\/}\"," $CONFIG_FILE
        sed -i "\$i\                        \"httpsProxy\": \"${https_proxy//\//\\/}\"," $CONFIG_FILE
        sed -i "\$i\                        \"no_proxy\": \"${no_proxy//\//\\/}\"" $CONFIG_FILE
        sed -i "\$i\                }" $CONFIG_FILE
        sed -i "\$i\        }" $CONFIG_FILE
        # add end line
        sed -i "\$i\\${PROXY_END_LINE//\//\\/}" $CONFIG_FILE
    else
        print_notice "Start line already exists, do nothing"
    fi
}

function disable_proxy() {
    # remove proxy lines from config file
    # check if start line exists
    grep -q "$PROXY_START_LINE" $CONFIG_FILE
    if [ $? -ne 0 ]; then
        print_notice "Start line does NOT exist, do nothing"
    else
        # remove lines between start and end line
        sed -i "/${PROXY_START_LINE//\//\\/}/,/${PROXY_END_LINE//\//\\/}/d" $CONFIG_FILE
    fi
}

task="${COMMAND}_proxy"

$task